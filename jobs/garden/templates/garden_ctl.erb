#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/garden
LOG_DIR=/var/vcap/sys/log/garden
PIDFILE=$RUN_DIR/garden.pid
DATA_DIR=/var/vcap/data/garden

function setup() {
  mkdir -p /var/vcap/sys/log/monit
  exec 1>> /var/vcap/sys/log/monit/garden.out.log
  exec 2>> /var/vcap/sys/log/monit/garden.err.log
}

# copied from https://github.com/concourse/concourse/blob/master/jobs/baggageclaim/templates/baggageclaim_ctl.erb#L54
# break out of bosh-lite device limitations
function permit_device_control() {
  local devices_mount_info=$(cat /proc/self/cgroup | grep devices)

  if [ -z "$devices_mount_info" ]; then
    # cgroups not set up; must not be in a container
    return
  fi

  local devices_subsytems=$(echo $devices_mount_info | cut -d: -f2)
  local devices_subdir=$(echo $devices_mount_info | cut -d: -f3)

  if [ "$devices_subdir" = "/" ]; then
    # we're in the root devices cgroup; must not be in a container
    return
  fi

  if [ ! -e /tmp/devices-cgroup ]; then
    # mount our container's devices subsystem somewhere
    mkdir /tmp/devices-cgroup
    mount -t cgroup -o $devices_subsytems none /tmp/devices-cgroup
  fi

  # permit our cgroup to do everything with all devices
  echo a > /tmp/devices-cgroup${devices_subdir}/devices.allow || true

  umount /tmp/devices-cgroup || true
}

function create_loop_devices() {
  amt=$1
  for i in $(seq 0 $amt); do
    mknod -m 0660 /dev/loop$i b 7 $i || true
  done
}

case $1 in

  start)
    setup

    if [ -f "$PIDFILE" ]; then
      pid=$(head -1 "$PIDFILE")

      if [ -n "$pid" ] && [ -e /proc/$pid ]; then
        echo "Garden is already running (pid: $pid); aborting."
        exit 1
      fi

      echo "Removing stale pidfile..."
      rm "$PIDFILE"
    fi

    mkdir -p $RUN_DIR
    mkdir -p $DATA_DIR
    mkdir -p $LOG_DIR

    export PATH=/var/vcap/packages/shadow/sbin:$PATH
    export PATH=/var/vcap/packages/runc/bin:$PATH

    depot_path=/var/vcap/data/garden/depot
    mkdir -p $depot_path

    graph_path=/var/vcap/data/garden/graph
    mkdir -p $graph_path

    real_graph=/var/vcap/data/garden/realgraph
    mkdir -p $real_graph/graph
    chmod go-x $real_graph
    mount --bind $real_graph/graph $graph_path

    permit_device_control
    create_loop_devices 256

    echo $$ > $PIDFILE

    exec /var/vcap/packages/guardian/bin/guardian \
      -depot=$depot_path \
      -graph=$graph_path \
      -bin=/var/vcap/packages/guardian/src/github.com/cloudfoundry-incubator/guardian/linux_backend/bin \
      -iodaemonBin=/var/vcap/packages/guardian/bin/iodaemon \
      -kawasakiBin=/var/vcap/packages/guardian/bin/kawasaki \
      -initBin=/var/vcap/packages/guardian/bin/init \
      -dadooBin=/var/vcap/packages/guardian/bin/dadoo \
      -nstarBin=/var/vcap/packages/guardian/bin/nstar \
      -tarBin=/var/vcap/packages/tar/tar \
      -mtu=<%= p("garden.network_mtu") %> \
      -listenNetwork=<%= p("garden.listen_network") %> \
      -listenAddr=<%= p("garden.listen_address") %> \
      -denyNetworks=<%= p("garden.deny_networks").join(",") %> \
      -allowNetworks=<%= p("garden.allow_networks").join(",") %> \
      -allowHostAccess=<%= p("garden.allow_host_access") %> \
      -debugAddr=<%= p("garden.debug_listen_address") %> \
      -rootfs=<%= p("garden.default_container_rootfs") %> \
      -containerGraceTime=<%= p("garden.default_container_grace_time") %> \
      -graphCleanupThresholdMB=<%= p("garden.graph_cleanup_threshold_in_mb") %> \
    <% if_p("garden.max_containers") do |max_containers| %> \
      -maxContainers=<%= max_containers %> \
    <% end %> \
    <% if_p("garden.network_plugin") do |plugin| %> \
      -networkPlugin=<%= plugin %> \
      <% if_p("garden.network_plugin_extra_args") do |args| %> \
      -networkPluginExtraArgs=<%= args.join(',') %> \
      <% end %> \
    <% end %> \
    <% if_p("garden.docker_registry_endpoint") do |endpoint| %> \
      -registry=<%= endpoint %> \
    <% end %> \
    <% if_p("garden.dropsonde.origin") do |origin| %> \
      -dropsondeOrigin=<%= origin %> \
    <% end %> \
    <% if_p("garden.dropsonde.destination") do |destination| %> \
      -dropsondeDestination=<%= destination %> \
    <% end %> \
    <% if_p("garden.tag") do |tag| %> \
      -tag=<%= tag %> \
    <% end %> \
    <% if_p("garden.port_pool.start") do |start| %> \
      -portPoolStart=<%= start %> \
    <% end %> \
    <% if_p("garden.port_pool.size") do |size| %> \
      -portPoolSize=<%= size %> \
    <% end %> \
    <% p("garden.insecure_docker_registry_list").each do |url| %> \
      -insecureDockerRegistry=<%= url %> \
    <% end %> \
    <% p("garden.persistent_image_list").each do |url| %> \
      -persistentImage=<%= url %> \
    <% end %> \
    <% p("garden.dns_servers").each do |server| %> \
      -dnsServer=<%= server %> \
    <% end %> \
      1>>$LOG_DIR/garden.stdout.log \
      2>>$LOG_DIR/garden.stderr.log

    ;;

  stop)
    setup
    pid=$(cat $PIDFILE)

    for i in $(seq 30); do
      echo "sending TERM to ${pid}..."
      if kill $pid; then
        sleep 1
      else
        echo "exited"
        exit 0
      fi
    done

    echo "timed out; sending SIGQUIT followed by SIGKILL to ${pid}..."
    if kill -QUIT $pid; then
      sleep 5

      echo "killing ${pid}..."
      kill -9 $pid
    fi

    echo "killed"

    ;;

  *)
    echo "Usage: $0 {start|stop}"

    ;;

esac
